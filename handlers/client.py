from aiogram import types, Dispatcher 
from create_bot import dp, bot 
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command, Text, ChatTypeFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ChatType


import sqlite3
kb_client = InlineKeyboardMarkup(row_width=2)
kb_client.add(
        InlineKeyboardButton("üá¨üáß English", callback_data='English'),
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='–†—É—Å—Å–∫–∏–π'),
        InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data='“ö–∞–∑–∞“õ—à–∞')
    )
kb_client_RMENU = InlineKeyboardMarkup(row_width=1)
kb_client_KMENU = InlineKeyboardMarkup(row_width=1)
kb_client_EMENU = InlineKeyboardMarkup(row_width=1)

class LanguageMode(StatesGroup):
    LANG_CHOICE = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    ENGLISH_MODE = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    RUSSIAN_MODE = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    KAZAKH_MODE = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    ENGLISH_MODE_MENU = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    RUSSIAN_MODE_MENU = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    KAZAKH_MODE_MENU = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    ENGLISH_MODE_CHECKCERTS = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    RUSSIAN_MODE_CHECKCERTS = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    KAZAKH_MODE_CHECKCERTS = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞

db = sqlite3.connect('server_certHappyChoice.db')
sql = db.cursor()

@dp.message_handler(Command('start'), ChatTypeFilter('private'))
async def start_command(message: types.Message, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    
    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:", reply_markup=kb_client)
    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await LanguageMode.LANG_CHOICE.set()



@dp.callback_query_handler(lambda c: c.data.startswith('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state=LanguageMode.RUSSIAN_MODE_MENU)
async def process_english(callback_query: types.CallbackQuery, state: FSMContext):
    await LanguageMode.LANG_CHOICE.set()
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:",reply_markup=kb_client)
@dp.callback_query_handler(lambda c: c.data.startswith('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state=LanguageMode.ENGLISH_MODE_MENU)
async def process_english(callback_query: types.CallbackQuery, state: FSMContext):
    await LanguageMode.LANG_CHOICE.set()
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:",reply_markup=kb_client)
@dp.callback_query_handler(lambda c: c.data.startswith('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state=LanguageMode.KAZAKH_MODE_MENU)
async def process_english(callback_query: types.CallbackQuery, state: FSMContext):
    await LanguageMode.LANG_CHOICE.set()
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:",reply_markup=kb_client)
@dp.callback_query_handler(lambda c: c.data.startswith('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state=LanguageMode.RUSSIAN_MODE_CHECKCERTS)
async def process_english(callback_query: types.CallbackQuery, state: FSMContext):
    await LanguageMode.LANG_CHOICE.set()
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:",reply_markup=kb_client)
@dp.callback_query_handler(lambda c: c.data.startswith('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state=LanguageMode.ENGLISH_MODE_CHECKCERTS)
async def process_english(callback_query: types.CallbackQuery, state: FSMContext):
    await LanguageMode.LANG_CHOICE.set()
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:",reply_markup=kb_client)
@dp.callback_query_handler(lambda c: c.data.startswith('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state=LanguageMode.KAZAKH_MODE_CHECKCERTS)
async def process_english(callback_query: types.CallbackQuery, state: FSMContext):
    await LanguageMode.LANG_CHOICE.set()
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:",reply_markup=kb_client)


################################################# –ü–ï–†–ï–ó–û–î –í –°–ï–†–¢–ò–§–ò–ö–ê–¢ –ú–û–î
@dp.callback_query_handler(lambda c: c.data.startswith('–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'), state=LanguageMode.RUSSIAN_MODE_MENU)
async def process_english(callback_query: types.CallbackQuery, state: FSMContext):
    kb_client_RMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_RMENU.add(
        #InlineKeyboardButton("‚úÖ –ü–†–û–í–ï–†–ö–ê –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê", callback_data='–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'),
       # InlineKeyboardButton("üìñ –û–°–¢–ê–í–ò–¢–¨ –û–ë–†–ê–©–ï–ù–ò–ï", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    await LanguageMode.RUSSIAN_MODE_CHECKCERTS.set()
    await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä \n –ù–∞–ø—Ä–∏–º–µ—Ä: AA001",reply_markup=kb_client_RMENU)


@dp.callback_query_handler(lambda c: c.data.startswith('checkcerts'), state=LanguageMode.ENGLISH_MODE_MENU)
async def process_english(callback_query: types.CallbackQuery, state: FSMContext):
    kb_client_EMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_EMENU.add(
        #InlineKeyboardButton("‚úÖ CHECK THE CERTIFICATE", callback_data='checkcerts'),
        #InlineKeyboardButton("üìñ leave a message", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è Return to main menu", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    await LanguageMode.ENGLISH_MODE_CHECKCERTS.set()
    await bot.send_message(callback_query.from_user.id, "To check the certificate, enter the serial number \n For example: AA001:",reply_markup=kb_client_EMENU)

@dp.callback_query_handler(lambda c: c.data.startswith('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–µ–∫—Å–µ—Ä—É'), state=LanguageMode.KAZAKH_MODE_MENU)
async def process_english(callback_query: types.CallbackQuery, state: FSMContext):
    kb_client_KMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_KMENU.add(
        #InlineKeyboardButton("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–µ–∫—Å–µ—Ä—É", callback_data='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–µ–∫—Å–µ—Ä—É'),
        #InlineKeyboardButton("üìñ —Ö–∞–±–∞—Ä–ª–∞–º–∞ “õ–∞–ª–¥—ã—Ä—É", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è –Ω–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    await LanguageMode.KAZAKH_MODE_CHECKCERTS.set()
    await bot.send_message(callback_query.from_user.id, "–ö—É”ô–ª—ñ–∫—Ç—ñ —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω —Å–µ—Ä–∏—è–ª—ã“õ –Ω”©–º—ñ—Ä–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ \n –ú—ã—Å–∞–ª—ã: AA001:",reply_markup=kb_client_KMENU)    




@dp.callback_query_handler(lambda c: c.data.startswith('English'), state=LanguageMode.LANG_CHOICE)
async def process_english(callback_query: types.CallbackQuery, state: FSMContext):  
    kb_client_EMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_EMENU.add(
        InlineKeyboardButton("‚úÖ CHECK THE CERTIFICATE", callback_data='checkcerts'),
        #InlineKeyboardButton("üìñ leave a message", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è Return to main menu", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    await bot.send_message(callback_query.from_user.id, "You have selected the English language mode",reply_markup=kb_client_EMENU)
    await LanguageMode.ENGLISH_MODE_MENU.set()
    

@dp.callback_query_handler(lambda c: c.data.startswith('–†—É—Å—Å–∫–∏–π'), state=LanguageMode.LANG_CHOICE)
async def process_english(callback_query: types.CallbackQuery):
    kb_client_RMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_RMENU.add(
        InlineKeyboardButton("‚úÖ –ü–†–û–í–ï–†–ö–ê –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê", callback_data='–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'),
       # InlineKeyboardButton("üìñ –û–°–¢–ê–í–ò–¢–¨ –û–ë–†–ê–©–ï–ù–ò–ï", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    await bot.send_message(callback_query.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",reply_markup=kb_client_RMENU)
    
    await LanguageMode.RUSSIAN_MODE_MENU.set()

@dp.callback_query_handler(lambda c: c.data.startswith('“ö–∞–∑–∞“õ—à–∞'), state=LanguageMode.LANG_CHOICE)
async def process_english(callback_query: types.CallbackQuery):
    kb_client_KMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_KMENU.add(
        InlineKeyboardButton("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–µ–∫—Å–µ—Ä—É", callback_data='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–µ–∫—Å–µ—Ä—É'),
        #InlineKeyboardButton("üìñ —Ö–∞–±–∞—Ä–ª–∞–º–∞ “õ–∞–ª–¥—ã—Ä—É", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è –Ω–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    await bot.send_message(callback_query.from_user.id, "–°—ñ–∑ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ —Ä–µ–∂–∏–º—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑",reply_markup=kb_client_KMENU)
    await LanguageMode.KAZAKH_MODE_MENU.set()    












@dp.message_handler(state=LanguageMode.ENGLISH_MODE_CHECKCERTS, content_types=types.ContentTypes.TEXT)
async def russian_mode(message: types.Message):
    kb_client_EMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_EMENU.add(
        #InlineKeyboardButton("‚úÖ CHECK THE CERTIFICATE", callback_data='checkcerts'),
        #InlineKeyboardButton("üìñ leave a message", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è Return to main menu", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    key_value = message.text
    sql.execute("SELECT * FROM Certificates WHERE CertNumber = ?", (key_value,))
    rows = sql.fetchall()
    lst = []
    if len(rows) > 0:
        lst = [item for row in rows for item in row]
        text = f" Certificate with serial number <b>{lst[0]}</b>,\n The student who received the certificate - <b>{lst[4]}</b>,\n Certificate at the end of the course - <b>{lst [1]}</b>,\n Certificate Issued - <b>{lst[3]}</b>,\n Course Instructor - <b>{lst[2]}</b>,\n Academic institution - <b>{lst[5]}</b>"
        await message.answer(text, parse_mode="HTML",reply_markup=kb_client_EMENU)            
                             
    else:
        await message.answer("A certificate with this serial number does not exist in the database. Try again.", reply_markup=kb_client_EMENU)


@dp.message_handler(state=LanguageMode.KAZAKH_MODE_CHECKCERTS, content_types=types.ContentTypes.TEXT)
async def russian_mode(message: types.Message):
    kb_client_KMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_KMENU.add(
        #InlineKeyboardButton("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–µ–∫—Å–µ—Ä—É", callback_data='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–µ–∫—Å–µ—Ä—É'),
        #InlineKeyboardButton("üìñ —Ö–∞–±–∞—Ä–ª–∞–º–∞ “õ–∞–ª–¥—ã—Ä—É", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è –Ω–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    key_value = message.text
    sql.execute("SELECT * FROM Certificates WHERE CertNumber = ?", (key_value,))
    rows = sql.fetchall()
    lst = []
    if len(rows) > 0:
        lst = [item for row in rows for item in row]
        text = f" –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—Ç—ã“£ —Å–µ—Ä–∏—è–ª—ã“õ –Ω”©–º—ñ—Ä—ñ <b>{lst[0]}</b>,\n –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∞–ª“ì–∞–Ω –æ“õ—É—à—ã - <b>{lst[4]}</b>,\n –ö—É—Ä—Å ”©—Ç–∫–µ–Ω–¥—ñ–≥—ñ —Ç—É—Ä–∞–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - <b> {lst[1]}</b>,\n –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±–µ—Ä—ñ–ª–¥—ñ - <b>{lst[3]}</b>,\n –ö—É—Ä—Å –∂–µ—Ç–µ–∫—à—ñ—Å—ñ - <b>{lst[2]} </b>,\n –û“õ—É –æ—Ä–Ω—ã - <b>{lst[5]}</b>"
        await message.answer(text, parse_mode="HTML", reply_markup=kb_client_KMENU)                                 
    else:
        await message.answer("–ë“±–ª —Å–µ—Ä–∏—è–ª—ã“õ –Ω”©–º—ñ—Ä—ñ –±–∞—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ—Ä–µ–∫“õ–æ—Ä–¥–∞ –∂–æ“õ. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",reply_markup=kb_client_KMENU)
@dp.message_handler(state=LanguageMode.RUSSIAN_MODE_CHECKCERTS, content_types=types.ContentTypes.TEXT)
async def russian_mode(message: types.Message):
    
    kb_client_RMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_RMENU.add(
        #InlineKeyboardButton("‚úÖ –ü–†–û–í–ï–†–ö–ê –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê", callback_data='–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'),
       # InlineKeyboardButton("üìñ –û–°–¢–ê–í–ò–¢–¨ –û–ë–†–ê–©–ï–ù–ò–ï", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    key_value = message.text
    sql.execute("SELECT * FROM Certificates WHERE CertNumber = ?", (key_value,))
    rows = sql.fetchall()
    lst = []
    if len(rows) > 0:
        lst = [item for row in rows for item in row]
        text = f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º <b>{lst[0]}</b>,\n –£—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∏–≤—à–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - <b>{lst[4]}</b>,\n –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∫—É—Ä—Å–∞ - <b>{lst[1]}</b>,\n –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω - <b>{lst[3]}</b>,\n –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫—É—Ä—Å–∞ - <b>{lst[2]}</b>,\n –£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ - <b>{lst[5]}</b>"
        await message.answer(text, parse_mode="HTML", reply_markup=kb_client_RMENU)            
                             
    else:
        await message.answer("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=kb_client_RMENU)







###############################################–ó–î–ï–°–¨ –§–£–ù–ö–¶–ò–ò –ö–û–¢–û–†–´–ï –û–¢–í–ï–ß–ê–Æ–¢ –ó–ê –û–ë–†–ê–©–ï–ù–ò–ï –ë–û–¢–ê –í –°–õ–£–ß–ê–ï –û–ë–†–´–í–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø

@dp.message_handler(state=LanguageMode.LANG_CHOICE, content_types=types.ContentTypes.TEXT)
async def russian_mode(message: types.Message):
    kb_client = InlineKeyboardMarkup(row_width=2)
    kb_client.add(
        InlineKeyboardButton("üá¨üáß English", callback_data='English'),
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='–†—É—Å—Å–∫–∏–π'),
        InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data='“ö–∞–∑–∞“õ—à–∞')
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:", reply_markup=kb_client)
    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await LanguageMode.LANG_CHOICE.set()

@dp.message_handler(state=LanguageMode.RUSSIAN_MODE_MENU, content_types=types.ContentTypes.TEXT)
async def russian_mode(message: types.Message):
    kb_client = InlineKeyboardMarkup(row_width=2)
    kb_client.add(
        InlineKeyboardButton("‚úÖ –ü–†–û–í–ï–†–ö–ê –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê", callback_data='–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'),
       # InlineKeyboardButton("üìñ –û–°–¢–ê–í–ò–¢–¨ –û–ë–†–ê–©–ï–ù–ò–ï", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:", reply_markup=kb_client)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await LanguageMode.RUSSIAN_MODE_MENU.set()
@dp.message_handler(state=LanguageMode.KAZAKH_MODE_MENU, content_types=types.ContentTypes.TEXT)
async def russian_mode(message: types.Message):
    kb_client_KMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_KMENU.add(
        InlineKeyboardButton("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–µ–∫—Å–µ—Ä—É", callback_data='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–µ–∫—Å–µ—Ä—É'),
        #InlineKeyboardButton("üìñ —Ö–∞–±–∞—Ä–ª–∞–º–∞ “õ–∞–ª–¥—ã—Ä—É", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è –Ω–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    await message.answer("–°—ñ–∑ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ —Ä–µ–∂–∏–º—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑:", reply_markup=kb_client_KMENU)
    await LanguageMode.KAZAKH_MODE_MENU.set()
@dp.message_handler(state=LanguageMode.ENGLISH_MODE_MENU, content_types=types.ContentTypes.TEXT)
async def russian_mode(message: types.Message):
    kb_client_EMENU = InlineKeyboardMarkup(row_width=1)
    kb_client_EMENU.add(
        InlineKeyboardButton("‚úÖ CHECK THE CERTIFICATE", callback_data='checkcerts'),
        #InlineKeyboardButton("üìñ leave a message", callback_data='–û–±—Ä–∞—â–µ–Ω–∏–µ'),
        InlineKeyboardButton("‚Ü™Ô∏è Return to main menu", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫
    await message.answer("You have selected the English language mode", reply_markup=kb_client_EMENU)
    await LanguageMode.ENGLISH_MODE_MENU.set()



@dp.message_handler(ChatTypeFilter('private'))
async def handle_private_message(message: types.Message):
   
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:",  reply_markup=kb_client)
    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await LanguageMode.LANG_CHOICE.set()